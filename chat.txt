import streamlit as st
from datetime import datetime, timedelta
from models.travel_plan import TravelPlan
from services.api_wrappers import search_flights, format_flight_data, get_hotel_suggestions, get_activity_suggestions
from utils.location_utils import find_iata_code
from PIL import Image

# Configuration
st.set_page_config(page_title="Travel Assistant", page_icon="✈️", layout="wide")

# Sample images for demonstration
DESTINATION_IMAGES = {
    "paris": "https://example.com/paris.jpg",
    "new york": "https://example.com/newyork.jpg",
    "tokyo": "https://example.com/tokyo.jpg",
    "default": "https://example.com/travel.jpg"
}

class TravelAgentUI:
    def __init__(self):
        """Initialize the conversational UI."""
        if 'travel_plan' not in st.session_state:
            st.session_state.travel_plan = TravelPlan()
            st.session_state.messages = []
            st.session_state.current_step = "welcome"
            st.session_state.last_user_input = None
            st.session_state.visual_feedback = {
                "image": DESTINATION_IMAGES["default"],
                "text": "Welcome to your personal travel assistant! Where would you like to go today?",
                "options": []
            }
        
    def display_conversation(self):
        """Display the conversation history."""
        with st.container():
            for message in st.session_state.messages:
                with st.chat_message(message["role"]):
                    st.markdown(message["content"])
                    
                    # Display budget info after each assistant message
                    if message["role"] == "assistant" and hasattr(st.session_state.travel_plan, 'total_budget'):
                        remaining = st.session_state.travel_plan.remaining_budget
                        total = st.session_state.travel_plan.total_budget
                        spent = total - remaining
                        st.progress(spent/total if total > 0 else 0)
                        st.caption(f"Budget: ${remaining:.2f} remaining of ${total:.2f}")

    def display_visual_feedback(self):
        """Display the right column with visual feedback."""
        with st.container():
            st.image(st.session_state.visual_feedback["image"], 
                   use_container_width=True,
                   caption=st.session_state.visual_feedback["text"])
            
            if st.session_state.visual_feedback.get("options"):
                st.markdown("**Options:**")
                for option in st.session_state.visual_feedback["options"]:
                    st.markdown(f"- {option}")
            
            # Always show budget status
            if hasattr(st.session_state.travel_plan, 'total_budget'):
                remaining = st.session_state.travel_plan.remaining_budget
                total = st.session_state.travel_plan.total_budget
                spent = total - remaining
                st.metric("Remaining Budget", f"${remaining:.2f}", f"-${spent:.2f}")

    def process_user_input(self, prompt):
        """Process user input immediately and update conversation."""
        self.add_message("user", prompt)
        st.session_state.last_user_input = prompt
        
        # Process based on current step
        if st.session_state.current_step == "welcome":
            self.process_destination(prompt)
        elif st.session_state.current_step == "dates":
            self.process_dates(prompt)
        elif st.session_state.current_step == "travelers":
            self.process_travelers(prompt)
        elif st.session_state.current_step == "budget":
            self.process_budget(prompt)
        elif st.session_state.current_step == "flights":
            self.process_flights(prompt)
        elif st.session_state.current_step == "hotels":
            self.process_hotels(prompt)
        elif st.session_state.current_step == "activities":
            self.process_activities(prompt)
        elif st.session_state.current_step == "summary":
            self.process_summary(prompt)
            
        st.rerun()

    def process_destination(self, prompt):
        """Process destination input."""
        destination = prompt.split("to ")[-1] if "to " in prompt else prompt
        result = find_iata_code(destination)
        
        if result:
            st.session_state.travel_plan.destination = result
            self.add_message("assistant", f"Great choice! {result['name']} is amazing. When would you like to travel? (e.g., 'June 15-30')")
            st.session_state.current_step = "dates"
            
            # Update visual feedback
            img = DESTINATION_IMAGES.get(result['name'].lower(), DESTINATION_IMAGES["default"])
            st.session_state.visual_feedback = {
                "image": img,
                "text": f"Planning trip to {result['name']}",
                "options": ["Popular dates:", "Next weekend", "Summer vacation", "Winter break"]
            }
        else:
            self.add_message("assistant", f"I couldn't find {destination}. Could you be more specific? For example: 'I want to go to Paris, France'")

    def process_dates(self, prompt):
        """Process travel dates input."""
        try:
            date_parts = prompt.split("-")
            departure_date = datetime.strptime(date_parts[0].strip(), "%B %d").replace(year=datetime.now().year)
            return_date = datetime.strptime(date_parts[1].strip(), "%B %d").replace(year=datetime.now().year)
            
            st.session_state.travel_plan.departure_date = departure_date.strftime("%Y-%m-%d")
            st.session_state.travel_plan.return_date = return_date.strftime("%Y-%m-%d")
            
            self.add_message("assistant", f"Got it! From {departure_date.strftime('%B %d')} to {return_date.strftime('%B %d')}. How many people are traveling?")
            st.session_state.current_step = "travelers"
            
            # Update visual feedback
            st.session_state.visual_feedback["text"] = f"Trip duration: {(return_date - departure_date).days} days"
            st.session_state.visual_feedback["options"] = ["1 traveler", "2 travelers", "Family of 4", "Group of 6+"]
            
        except Exception as e:
            self.add_message("assistant", "I didn't understand those dates. Please try again like: 'June 15-30'")

    def process_travelers(self, prompt):
        """Process number of travelers input."""
        try:
            travelers = int(prompt)
            st.session_state.travel_plan.travelers = travelers
            self.add_message("assistant", f"Perfect! {travelers} travelers. What's your total budget for this trip? (e.g., '$2000')")
            st.session_state.current_step = "budget"
            
            # Update visual feedback
            st.session_state.visual_feedback["text"] = f"Planning for {travelers} traveler{'s' if travelers > 1 else ''}"
            st.session_state.visual_feedback["options"] = ["Budget ranges:", "$500-$1000", "$1000-$2000", "$2000+"]
            
        except:
            self.add_message("assistant", "Please enter a number (e.g., '2' or '4')")

    def process_budget(self, prompt):
        """Process budget input."""
        try:
            budget = float(prompt.replace("$", "").strip())
            st.session_state.travel_plan.total_budget = budget
            st.session_state.travel_plan.remaining_budget = budget
            
            self.add_message("assistant", f"Budget set at ${budget:.2f}. Would you like me to find flight options now? (yes/no)")
            st.session_state.current_step = "flights"
            
            # Update visual feedback
            st.session_state.visual_feedback["text"] = f"Total budget: ${budget:.2f}"
            st.session_state.visual_feedback["options"] = ["What this includes:", "Flights", "Hotels", "Activities"]
            
        except:
            self.add_message("assistant", "Please enter a valid amount (e.g., '$2000' or '1500')")

    def process_flights(self, prompt):
        """Process flight options."""
        if "yes" in prompt.lower():
            with st.spinner("Searching for flights..."):
                flight_data = search_flights(
                    "JFK",  # Default departure
                    st.session_state.travel_plan.destination['iata'],
                    st.session_state.travel_plan.departure_date,
                    st.session_state.travel_plan.return_date,
                    st.session_state.travel_plan.travelers,
                    st.session_state.travel_plan.remaining_budget
                )
                
                formatted = format_flight_data(flight_data, st.session_state.travel_plan)
                self.add_message("assistant", formatted)
                self.add_message("assistant", "Would you like to book one of these options? (1/2/3 or 'no')")
                
                # Update visual feedback with flight options
                st.session_state.visual_feedback["text"] = "Available Flight Options"
                st.session_state.visual_feedback["options"] = [
                    f"Option 1: ${flight_data['data'][0]['price']['total']}",
                    f"Option 2: ${flight_data['data'][1]['price']['total']}",
                    f"Option 3: ${flight_data['data'][2]['price']['total']}"
                ]
                
        elif "no" in prompt.lower():
            self.add_message("assistant", "No problem. Would you like to search for hotels instead? (yes/no)")
            st.session_state.current_step = "hotels"
            
            # Update visual feedback
            st.session_state.visual_feedback["text"] = "Skipping flight booking"
            st.session_state.visual_feedback["options"] = ["Next step:", "Find hotels", "See activities", "View summary"]
            
        elif prompt.isdigit() and int(prompt) in [1, 2, 3]:
            option = int(prompt) - 1
            flight_data = search_flights(
                "JFK",
                st.session_state.travel_plan.destination['iata'],
                st.session_state.travel_plan.departure_date,
                st.session_state.travel_plan.return_date,
                st.session_state.travel_plan.travelers,
                st.session_state.travel_plan.remaining_budget
            )
            price = float(flight_data['data'][option]['price']['total'])
            
            if price <= st.session_state.travel_plan.remaining_budget:
                st.session_state.travel_plan.flights = {
                    'option': int(prompt),
                    'price': price,
                    'details': format_flight_data(flight_data, st.session_state.travel_plan)
                }
                st.session_state.travel_plan.remaining_budget -= price
                
                self.add_message("assistant", f"Flight option {prompt} booked for ${price:.2f}! Would you like to search for hotels now? (yes/no)")
                st.session_state.current_step = "hotels"
                
                # Update visual feedback
                st.session_state.visual_feedback["text"] = f"Flight booked! Remaining budget: ${st.session_state.travel_plan.remaining_budget:.2f}"
                st.session_state.visual_feedback["options"] = ["Next step:", "Find hotels", "See activities", "View summary"]
                
            else:
                self.add_message("assistant", f"Sorry, this option exceeds your remaining budget by ${price - st.session_state.travel_plan.remaining_budget:.2f}. Please choose another option.")
        else:
            self.add_message("assistant", "Please choose a flight option (1/2/3) or say 'no' to skip")

    def process_hotels(self, prompt):
        """Process hotel options."""
        if "yes" in prompt.lower():
            with st.spinner("Searching for hotels..."):
                departure_date = datetime.strptime(st.session_state.travel_plan.departure_date, "%Y-%m-%d")
                return_date = datetime.strptime(st.session_state.travel_plan.return_date, "%Y-%m-%d")
                nights = (return_date - departure_date).days
                
                hotels = get_hotel_suggestions(
                    st.session_state.travel_plan.destination['name'],
                    st.session_state.travel_plan.remaining_budget,
                    nights,
                    st.session_state.travel_plan.travelers
                )
                
                self.add_message("assistant", hotels)
                self.add_message("assistant", "Would you like to book one of these options? (1/2/3 or 'no')")
                
                # Update visual feedback with hotel options
                st.session_state.visual_feedback["text"] = "Available Hotel Options"
                st.session_state.visual_feedback["options"] = [
                    "Option 1: 3-star hotel",
                    "Option 2: 4-star hotel",
                    "Option 3: Luxury resort"
                ]
                
        elif "no" in prompt.lower():
            self.add_message("assistant", "Would you like to search for activities instead? (yes/no)")
            st.session_state.current_step = "activities"
            
            # Update visual feedback
            st.session_state.visual_feedback["text"] = "Skipping hotel booking"
            st.session_state.visual_feedback["options"] = ["Next step:", "Find activities", "View summary"]
            
        elif prompt.isdigit() and int(prompt) in [1, 2, 3]:
            # Simulate hotel booking (replace with actual implementation)
            price = 150 * (int(prompt) * 0.8)  # Sample pricing logic
            
            if price <= st.session_state.travel_plan.remaining_budget:
                st.session_state.travel_plan.hotels = {
                    'option': int(prompt),
                    'price': price,
                    'nights': (datetime.strptime(st.session_state.travel_plan.return_date, "%Y-%m-%d") - 
                              datetime.strptime(st.session_state.travel_plan.departure_date, "%Y-%m-%d")).days
                }
                st.session_state.travel_plan.remaining_budget -= price
                
                self.add_message("assistant", f"Hotel option {prompt} booked for ${price:.2f}! Would you like to search for activities now? (yes/no)")
                st.session_state.current_step = "activities"
                
                # Update visual feedback
                st.session_state.visual_feedback["text"] = f"Hotel booked! Remaining budget: ${st.session_state.travel_plan.remaining_budget:.2f}"
                st.session_state.visual_feedback["options"] = ["Next step:", "Find activities", "View summary"]
                
            else:
                self.add_message("assistant", f"Sorry, this option exceeds your remaining budget by ${price - st.session_state.travel_plan.remaining_budget:.2f}. Please choose another option.")
        else:
            self.add_message("assistant", "Please choose a hotel option (1/2/3) or say 'no' to skip")

    def process_activities(self, prompt):
        """Process activity options."""
        if "yes" in prompt.lower():
            with st.spinner("Searching for activities..."):
                departure_date = datetime.strptime(st.session_state.travel_plan.departure_date, "%Y-%m-%d")
                return_date = datetime.strptime(st.session_state.travel_plan.return_date, "%Y-%m-%d")
                days = (return_date - departure_date).days
                
                activities = get_activity_suggestions(
                    st.session_state.travel_plan.destination['name'],
                    st.session_state.travel_plan.remaining_budget,
                    days
                )
                
                self.add_message("assistant", activities)
                self.add_message("assistant", "Would you like to add any of these to your itinerary? (1/2/3/4/5 or 'no')")
                
                # Update visual feedback with activity options
                st.session_state.visual_feedback["text"] = "Available Activities"
                st.session_state.visual_feedback["options"] = [
                    "Option 1: City tour",
                    "Option 2: Museum pass",
                    "Option 3: Adventure activity",
                    "Option 4: Food experience",
                    "Option 5: Day trip"
                ]
                
        elif "no" in prompt.lower():
            self.add_message("assistant", "Your itinerary is complete! Type 'summary' to see your trip details.")
            st.session_state.current_step = "summary"
            
            # Update visual feedback
            st.session_state.visual_feedback["text"] = "Ready to view your trip summary"
            st.session_state.visual_feedback["options"] = ["Type 'summary' to see your complete itinerary"]
            
        elif prompt.isdigit() and int(prompt) in range(1, 6):
            # Simulate activity booking (replace with actual implementation)
            price = 50 * int(prompt)  # Sample pricing logic
            
            if price <= st.session_state.travel_plan.remaining_budget:
                if not hasattr(st.session_state.travel_plan, 'activities'):
                    st.session_state.travel_plan.activities = []
                
                st.session_state.travel_plan.activities.append({
                    'option': int(prompt),
                    'price': price
                })
                st.session_state.travel_plan.remaining_budget -= price
                
                self.add_message("assistant", f"Activity {prompt} added for ${price:.2f}! Would you like to add more activities? (yes/no)")
                
                # Update visual feedback
                st.session_state.visual_feedback["text"] = f"Activity added! Remaining budget: ${st.session_state.travel_plan.remaining_budget:.2f}"
                st.session_state.visual_feedback["options"] = ["Add more activities?", "Yes", "No, view summary"]
                
            else:
                self.add_message("assistant", f"Sorry, this option exceeds your remaining budget by ${price - st.session_state.travel_plan.remaining_budget:.2f}. Please choose another option.")
        else:
            self.add_message("assistant", "Please choose an activity option (1-5) or say 'no' to finish")

    def process_summary(self, prompt):
        """Process summary request."""
        if "summary" in prompt.lower():
            # Calculate totals
            flight_cost = st.session_state.travel_plan.flights.get('price', 0) if hasattr(st.session_state.travel_plan, 'flights') else 0
            hotel_cost = st.session_state.travel_plan.hotels.get('price', 0) if hasattr(st.session_state.travel_plan, 'hotels') else 0
            activity_cost = sum(a.get('price', 0) for a in st.session_state.travel_plan.activities) if hasattr(st.session_state.travel_plan, 'activities') else 0
            total_spent = flight_cost + hotel_cost + activity_cost
            
            summary = f"""
            **Trip Summary**
            - Destination: {st.session_state.travel_plan.destination['name']}
            - Dates: {st.session_state.travel_plan.departure_date} to {st.session_state.travel_plan.return_date}
            - Travelers: {st.session_state.travel_plan.travelers}
            - Total Budget: ${st.session_state.travel_plan.total_budget:.2f}
            - Total Spent: ${total_spent:.2f}
            - Remaining Budget: ${st.session_state.travel_plan.remaining_budget:.2f}
            
            **Bookings:**
            - Flights: {'Not booked' if flight_cost == 0 else f"Option {st.session_state.travel_plan.flights['option']} (${flight_cost:.2f})"}
            - Hotels: {'Not booked' if hotel_cost == 0 else f"Option {st.session_state.travel_plan.hotels['option']} (${hotel_cost:.2f})"}
            - Activities: {len(st.session_state.travel_plan.activities) if hasattr(st.session_state.travel_plan, 'activities') else 0} booked (${activity_cost:.2f})
            """
            
            self.add_message("assistant", summary)
            
            # Update visual feedback
            st.session_state.visual_feedback["text"] = f"Enjoy your trip to {st.session_state.travel_plan.destination['name']}!"
            st.session_state.visual_feedback["options"] = [
                "What's next:",
                "Save itinerary",
                "Start new trip",
                "Contact support"
            ]

    def add_message(self, role, content):
        """Add a message to the conversation."""
        st.session_state.messages.append({"role": role, "content": content})

    def run(self):
        """Run the application with two-column layout."""
        col1, col2 = st.columns([2, 1])
        
        with col1:
            st.header("Travel Assistant")
            self.display_conversation()
            
            # Display input at the bottom
            if prompt := st.chat_input("Type your message here..."):
                self.process_user_input(prompt)
        
        with col2:
            st.header("Trip Details")
            self.display_visual_feedback()

# Run the app
if __name__ == "__main__":
    agent = TravelAgentUI()
    agent.run()